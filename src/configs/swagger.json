{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "volunteerium-api",
    "description": "RESTful-API Volunteerium",
    "contact": {
      "name": "Volunteerium",
      "email": "info.volunteerium@gmail.com"
    },
    "license": {
      "name": "MIT"
    }
  },
  "host": "127.0.0.1:8000",
  "basePath": "/",
  "schemes": ["http", "https"],
  "securityDefinitions": {
    "Token": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Simple Token Authentication * Example: <b>Token ...tokenKey...</b>"
    },
    "Bearer": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "JWT Authentication * Example: <b>Bearer ...accessToken...</b>"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/tokens/": {
      "get": {
        "tags": ["Token"],
        "summary": "Get all tokens",
        "description": "Retrieve a list of all tokens",
        "responses": {
          "200": {
            "description": "List of tokens retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "details": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "object"
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "token-id"
                      },
                      "token": {
                        "type": "string",
                        "example": "token-string"
                      },
                      "userId": {
                        "type": "string",
                        "example": "user-id"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Token"],
        "summary": "Create a new token",
        "description": "Create a new token and save it to the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "token-string"
                },
                "userId": {
                  "type": "string",
                  "example": "user-id"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Token created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "token-id"
                    },
                    "token": {
                      "type": "string",
                      "example": "token-string"
                    },
                    "userId": {
                      "type": "string",
                      "example": "user-id"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/tokens/{id}": {
      "get": {
        "tags": ["Token"],
        "summary": "Get a token by ID",
        "description": "Retrieve a specific token by its ID",
        "responses": {
          "200": {
            "description": "Token retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "token-id"
                    },
                    "token": {
                      "type": "string",
                      "example": "token-string"
                    },
                    "userId": {
                      "type": "string",
                      "example": "user-id"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Token"],
        "summary": "Delete a token by ID",
        "description": "Delete a specific token by its ID",
        "responses": {
          "204": {
            "description": "Token deleted successfully"
          },
          "404": {
            "description": "Token not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register",
        "description": "Register with valid fullName, email, and password",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "fullName": {
                  "type": "string",
                  "example": "John Doe"
                },
                "email": {
                  "type": "string",
                  "example": "john.doe@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "Test@1234"
                },
                "userType": {
                  "type": "string",
                  "example": "individual"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Please verify your email to complete your registration"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request, validation error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation error message"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login",
        "description": "Login with email and password to get simpleToken and JWT",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "testUser@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "Test@1234"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": ["Authentication"],
        "summary": "SimpleToken: Logout",
        "description": "Delete simple token key and bypass JWT token",
        "responses": {
          "200": {
            "description": "Logout successful",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "You are successfully logged out!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Logout failed",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Logout failed. Please try again!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "No Authorization Header provided!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "JWT: Refresh",
        "description": "Refresh accessToken with  ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "bearer": {
                  "type": "object",
                  "properties": {
                    "refresh": {
                      "type": "string",
                      "example": "... ..."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New access token generated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "bearer": {
                  "type": "object",
                  "properties": {
                    "access": {
                      "type": "string",
                      "example": "new-access-token"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid token",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "JWT refresh token has expired or is invalid!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Data not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "No data found in refresh token!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/auth/verify-email": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Verify Email",
        "description": "Verify user email with a verification token",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Verification token received via email",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "example": "any"
                },
                "schema": {
                  "example": "any"
                },
                "token": {
                  "example": "any"
                },
                "user": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Forgot Password",
        "description": "Request a URL with email to reset password",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "testUser@gmail.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset code sent successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "resetToken": {
                  "type": "string",
                  "example": "reset-password-token"
                },
                "message": {
                  "type": "string",
                  "example": "Password reset code has been sent to your e-mail. Please check your mailbox."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Invalid request. Please provide correct email address!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "No account found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "No account found!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/auth/verify-reset": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Verify Reset Code",
        "description": "Verify reset code and token for password reset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "resetToken": {
                  "type": "string",
                  "example": "reset-password-token"
                },
                "resetCode": {
                  "type": "string",
                  "example": "reset-code"
                },
                "email": {
                  "type": "string",
                  "example": "user@example.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reset token and code verified successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "resetToken": {
                  "type": "string",
                  "example": "new-reset-token"
                },
                "message": {
                  "type": "string",
                  "example": "Reset token verified successfully"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid or expired reset code",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Invalid or expired reset code. Please request reset code again!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/auth/reset/{resetToken}": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Reset Password",
        "description": "Reset password with email, new password, and reset token.",
        "parameters": [
          {
            "name": "resetToken",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "testUser@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "newPassword@123"
                }
              }
            }
          },
          {
            "name": " ",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Reset token received via email"
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Your password has been successfully reset!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid or expired reset token",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Invalid or expired reset token"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "No user found with this email",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "No user found with this email"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/auth/google/callback": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Successful Authentication Callback",
        "description": "Handles successful authentication, generates tokens, and redirects the user to the client URL with user data encoded in the query parameters.",
        "responses": {
          "302": {
            "description": "Redirects to the client URL with user data",
            "headers": {
              "Location": {
                "description": "The URL to which the user is redirected after successful authentication.",
                "schema": {
                  "type": "string",
                  "example": "https://your-client-url.com/auth/success?provider=google&user=%7B%22error%22:false,%22message%22:%22You%20are%20successfully%20logged%20in!%22,%22bearer%22:%7B%22access%22:%22access-token%22,%22refresh%22:%22refresh-token%22%7D,%22token%22:%22token-data%22,%22user%22:%7B%22id%22:%22user-id%22,%22name%22:%22John%20Doe%22%7D%7D"
                }
              }
            }
          },
          "400": {
            "description": "Bad request if the user is not authenticated",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Authentication failed or user not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": ["Users"],
        "summary": "List Users",
        "description": "\r  You can send query with endpoint for search[], sort[], page and limit.\r  <ul> Examples:\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get Single User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "204": {
            "description": "User   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Account successfully deleted!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Error message"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/details/users/": {
      "get": {
        "tags": ["Details"],
        "summary": "List Users' Details",
        "description": "\r  You can send query with endpoint for search[], sort[], page and limit.\r  <ul> Examples:\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/details/users/{id}": {
      "get": {
        "tags": ["Details"],
        "summary": "Get Single User's Details",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": ["Details"],
        "summary": "Update Single User's Details",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDetails"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": ["Details"],
        "summary": "Update Single User's Details",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDetails"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/events/": {
      "get": {
        "tags": ["Event"],
        "summary": "List all events",
        "description": "\r  Retrieve a list of events based on search and filter criteria. You can send query parameters to filter, sort, and paginate the results.\r  <ul>\r  <li>Search by title: <b>search[title]=charity</b></li>\r  <li>Search by location: <b>search[location]=berlin</b></li>\r  <li>Filter events by start date: <b>filter[startDate]=2024-10-10</b></li>\r  <li>Filter events by end date: <b>filter[endDate]=2024-10-28</b></li>\r  <li>Filter by categories: <b>filter[category]=health,animal,education</b></li>\r  <li>Sort events by creation date: <b>sort[createdAt]=desc</b></li>\r  <li>Pagination: <b>page=1</b> and <b>limit=5</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": ["Event"],
        "summary": "Create a new event",
        "description": "Create a new event and save it to the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Event created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "$ref": "#/definitions/Event"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/events/participant/{id}": {
      "get": {
        "tags": ["Event"],
        "summary": "List events participated by a user",
        "description": "Retrieve a list of events that a specific user has participated in, based on user ID from the EventParticipant model.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/events/languages": {
      "get": {
        "tags": ["Event"],
        "summary": "List languages with event count",
        "description": "Retrieve a list of languages and the count of events for each language",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "tags": ["Event"],
        "summary": "Get an event by ID",
        "description": "Retrieve a specific event by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Event ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": ["Event"],
        "summary": "Update an event by ID",
        "description": "Update a specific event by its ID and save the changes to the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "$ref": "#/definitions/Event"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": ["Event"],
        "summary": "Delete an event by ID",
        "description": "Delete a specific event by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Event ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Event deleted successfully"
          },
          "404": {
            "description": "Event not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Event not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Event"],
        "summary": "Update an event by ID",
        "description": "Update a specific event by its ID and save the changes to the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "$ref": "#/definitions/Event"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/interests/": {
      "get": {
        "tags": ["Interest"],
        "summary": "Get all interests",
        "description": "\r  You can send query parameters for search[], sort[], page, and limit.\r  <ul>\r  <li>URL/?<b>search[name]=value1</b></li>\r  <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "List of interests retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "details": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "object"
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "interest-id"
                      },
                      "name": {
                        "type": "string",
                        "example": "interest-name"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Interest"],
        "summary": "Create a new interest",
        "description": "Create a new interest and save it to the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "interest-name"
                }
              },
              "required": ["name"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Interest   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "New interest successfully created!"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "interest-id"
                    },
                    "name": {
                      "type": "string",
                      "example": "interest-name"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/interests/{id}": {
      "get": {
        "tags": ["Interest"],
        "summary": "Get an interest by ID",
        "description": "Retrieve a specific interest by its ID",
        "responses": {
          "200": {
            "description": "Interest retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "interest-id"
                    },
                    "name": {
                      "type": "string",
                      "example": "interest-name"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Interest not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Interest not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Interest"],
        "summary": "Update an existing interest",
        "description": "Update the details of an existing interest by its ID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": " -interest-name"
                }
              },
              "required": ["name"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Interest   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Interest   successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "interest-id"
                    },
                    "name": {
                      "type": "string",
                      "example": "updated-interest-name"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Interest not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Interest not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Interest"],
        "summary": "Delete an interest by ID",
        "description": "Delete a specific interest by its ID",

        "responses": {
          "204": {
            "description": "Interest deleted successfully"
          },
          "404": {
            "description": "Interest not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Interest not found!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Interest"],
        "summary": "Update an existing interest",
        "description": "Update the details of an existing interest by its ID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": " -interest-name"
                }
              },
              "required": ["name"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Interest   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Interest   successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "interest-id"
                    },
                    "name": {
                      "type": "string",
                      "example": "updated-interest-name"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Interest not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Interest not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/addresses/": {
      "get": {
        "tags": ["Address"],
        "summary": "Get all addresses",
        "description": "\r  You can send query parameters for search[], sort[], page, and limit.\r  <ul>\r  <li>URL/?<b>search[city]=value1</b></li>\r  <li>URL/?<b>sort[city]=1&sort[country]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": ["Address"],
        "summary": "Create a new address",
        "description": "Create a new address and save it to the database",
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/addresses/{id}": {
      "get": {
        "tags": ["Address"],
        "summary": "Get an address by ID",
        "description": "Retrieve a specific address by its ID",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": ["Address"],
        "summary": "Update an existing address",
        "description": "Update the details of an existing address by its ID",
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": ["Address"],
        "summary": "Delete an address by ID",
        "description": "Delete a specific address by its ID",

        "responses": {
          "204": {
            "description": "Address deleted successfully"
          },
          "404": {
            "description": "Address not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Address not found!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Address"],
        "summary": "Update an existing address",
        "description": "Update the details of an existing address by its ID",

        "responses": {
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/documents/": {
      "get": {
        "tags": ["Document"],
        "summary": "Get all documents",
        "description": "\r  You can send query parameters for search[], sort[], page, and limit.\r  <ul>\r  <li>URL/?<b>search[title]=value1</b></li>\r  <li>URL/?<b>sort[title]=1&sort[createdAt]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "List of documents retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "document-id"
                      },
                      "title": {
                        "type": "string",
                        "example": "document-title"
                      },
                      "file": {
                        "type": "string",
                        "example": "document-url"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Document"],
        "summary": "Create a new document",
        "description": "Create a new document and save it to the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "example": "document-title"
                },
                "file": {
                  "type": "string",
                  "example": "document-url"
                },
                "userId": {
                  "type": "string",
                  "example": "user-id"
                },
                "eventId": {
                  "type": "string",
                  "example": "event-id"
                }
              },
              "required": ["title", "file", "userId", "eventId"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Document   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "New document successfully created!"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "document-id"
                    },
                    "title": {
                      "type": "string",
                      "example": "document-title"
                    },
                    "file": {
                      "type": "string",
                      "example": "document-url"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/documents/{id}": {
      "get": {
        "tags": ["Document"],
        "summary": "Get a document by ID",
        "description": "Retrieve a specific document by its ID",

        "responses": {
          "200": {
            "description": "Document retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "document-id"
                    },
                    "title": {
                      "type": "string",
                      "example": "document-title"
                    },
                    "file": {
                      "type": "string",
                      "example": "document-url"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Document not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Document not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Document"],
        "summary": "Update an existing document",
        "description": "Update the details of an existing document by its ID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "example": " -document-title"
                },
                "file": {
                  "type": "string",
                  "example": " -document-url"
                }
              },
              "required": ["title", "file"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Document   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Document   successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "document-id"
                    },
                    "title": {
                      "type": "string",
                      "example": " -document-title"
                    },
                    "file": {
                      "type": "string",
                      "example": "updated-document-url"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Document not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Document not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Document"],
        "summary": "Delete a document by ID",
        "description": "Delete a specific document by its ID",

        "responses": {
          "204": {
            "description": "Document deleted successfully"
          },
          "404": {
            "description": "Document not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Document not found!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Document"],
        "summary": "Update an existing document",
        "description": "Update the details of an existing document by its ID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "example": " -document-title"
                },
                "file": {
                  "type": "string",
                  "example": " -document-url"
                }
              },
              "required": ["title", "file"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Document   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Document   successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "document-id"
                    },
                    "title": {
                      "type": "string",
                      "example": " -document-title"
                    },
                    "file": {
                      "type": "string",
                      "example": "updated-document-url"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Document not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Document not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/event-feedbacks/": {
      "get": {
        "tags": ["EventFeedback"],
        "summary": "Get all event feedbacks",
        "description": "\r  You can send query parameters for search[], sort[], page, and limit.\r  <ul>\r  <li>URL/?<b>search[feedback]=value1</b></li>\r  <li>URL/?<b>filter[eventId]=value1</b></li>\r  <li>URL/?<b>sort[rating]=1&sort[createdAt]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "List of event feedbacks retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "details": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "object"
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "feedback-id"
                      },
                      "userId": {
                        "type": "string",
                        "example": "user-id"
                      },
                      "eventId": {
                        "type": "string",
                        "example": "event-id"
                      },
                      "feedback": {
                        "type": "string",
                        "example": "Great event!"
                      },
                      "rating": {
                        "type": "number",
                        "example": 5
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["EventFeedback"],
        "summary": "Create a new event feedback",
        "description": "Create a new event feedback and save it to the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "user-id"
                },
                "eventId": {
                  "type": "string",
                  "example": "event-id"
                },
                "feedback": {
                  "type": "string",
                  "example": "Great event!"
                },
                "rating": {
                  "type": "number",
                  "example": 5
                }
              },
              "required": ["userId", "eventId", "feedback", "rating"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "EventFeedback   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "New feedback successfully created!"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "feedback-id"
                    },
                    "userId": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "eventId": {
                      "type": "string",
                      "example": "event-id"
                    },
                    "feedback": {
                      "type": "string",
                      "example": "Great event!"
                    },
                    "rating": {
                      "type": "number",
                      "example": 5
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/event-feedbacks/{id}": {
      "get": {
        "tags": ["EventFeedback"],
        "summary": "Get feedback by ID",
        "description": "Retrieve a specific feedback by its ID",
        "responses": {
          "200": {
            "description": "EventFeedback retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "feedback-id"
                    },
                    "userId": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "eventId": {
                      "type": "string",
                      "example": "event-id"
                    },
                    "feedback": {
                      "type": "string",
                      "example": "Great event!"
                    },
                    "rating": {
                      "type": "number",
                      "example": 5
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "EventFeedback not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "EventFeedback not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["EventFeedback"],
        "summary": "Update an existing feedback",
        "description": "Update the details of an existing feedback by its ID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "feedback": {
                  "type": "string",
                  "example": "Updated feedback"
                },
                "rating": {
                  "type": "number",
                  "example": 4
                }
              },
              "required": ["feedback", "rating"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "EventFeedback   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "EventFeedback updated successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "feedback-id"
                    },
                    "userId": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "eventId": {
                      "type": "string",
                      "example": "event-id"
                    },
                    "feedback": {
                      "type": "string",
                      "example": "Updated feedback"
                    },
                    "rating": {
                      "type": "number",
                      "example": 4
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "EventFeedback not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "EventFeedback not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["EventFeedback"],
        "summary": "Delete a feedback by ID",
        "description": "Delete a specific feedback by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "EventFeedback ID"
          }
        ],
        "responses": {
          "204": {
            "description": "EventFeedback deleted successfully"
          },
          "404": {
            "description": "EventFeedback not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "EventFeedback not found!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["EventFeedback"],
        "summary": "Update an existing feedback",
        "description": "Update the details of an existing feedback by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "EventFeedback ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "feedback": {
                  "type": "string",
                  "example": "Updated feedback"
                },
                "rating": {
                  "type": "number",
                  "example": 4
                }
              },
              "required": ["feedback", "rating"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "EventFeedback   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "EventFeedback updated successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "feedback-id"
                    },
                    "userId": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "eventId": {
                      "type": "string",
                      "example": "event-id"
                    },
                    "feedback": {
                      "type": "string",
                      "example": "Updated feedback"
                    },
                    "rating": {
                      "type": "number",
                      "example": 4
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "EventFeedback not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "EventFeedback not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/notifications/": {
      "get": {
        "tags": ["Notification"],
        "summary": "Get all notifications for a user",
        "description": "Retrieve all notifications for the authenticated user.\r  You can send query parameters for search[], sort[], page, and limit.\r  <ul>\r  <li>URL/?<b>search[content]=value1</b></li>\r  <li>URL/?<b>sort[createdAt]=1&sort[notificationType]=-1</b></li>\r  <li>URL/?<b>page=2&limit=10</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "List of notifications retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "details": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "object"
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "notification-id"
                      },
                      "userId": {
                        "type": "string",
                        "example": "user-id"
                      },
                      "content": {
                        "type": "string",
                        "example": "Notification content"
                      },
                      "notificationType": {
                        "type": "string",
                        "example": "eventReminder"
                      },
                      "isRead": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Notification"],
        "summary": "Create a new notification",
        "description": "Create a new notification and save it to the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "user-id"
                },
                "content": {
                  "type": "string",
                  "example": "Notification content"
                },
                "notificationType": {
                  "type": "string",
                  "example": "eventReminder"
                }
              },
              "required": ["userId", "content", "notificationType"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notification   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "New notification successfully created!"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "notification-id"
                    },
                    "userId": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "content": {
                      "type": "string",
                      "example": "Notification content"
                    },
                    "notificationType": {
                      "type": "string",
                      "example": "eventReminder"
                    },
                    "isRead": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/notifications/read-all": {
      "get": {
        "tags": ["Notification"],
        "summary": "Mark all notifications as read for a user",
        "description": "Mark all unread notifications as read for the authenticated user",
        "responses": {
          "200": {
            "description": "All notifications marked as read successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "All unread notifications marked as read successfully"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/notifications/{id}": {
      "get": {
        "tags": ["Notification"],
        "summary": "Get a notification by ID",
        "description": "Retrieve a specific notification by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Notification ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "notification-id"
                    },
                    "userId": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "content": {
                      "type": "string",
                      "example": "Notification content"
                    },
                    "notificationType": {
                      "type": "string",
                      "example": "eventReminder"
                    },
                    "isRead": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Notification not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Notification not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Notification"],
        "summary": "Update an existing notification",
        "description": "Update the details of an existing notification by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Notification ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "Updated notification content"
                },
                "notificationType": {
                  "type": "string",
                  "example": "eventReminder"
                },
                "isRead": {
                  "type": "boolean",
                  "example": true
                }
              },
              "required": ["content", "notificationType", "isRead"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Notification   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Notification updated successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "notification-id"
                    },
                    "userId": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "content": {
                      "type": "string",
                      "example": "Updated notification content"
                    },
                    "notificationType": {
                      "type": "string",
                      "example": "eventReminder"
                    },
                    "isRead": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Notification not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Notification not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Notification"],
        "summary": "Delete a notification by ID",
        "description": "Delete a specific notification by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Notification ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Notification deleted successfully"
          },
          "404": {
            "description": "Notification not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Notification not found!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Notification"],
        "summary": "Update an existing notification",
        "description": "Update the details of an existing notification by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Notification ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "Updated notification content"
                },
                "notificationType": {
                  "type": "string",
                  "example": "eventReminder"
                },
                "isRead": {
                  "type": "boolean",
                  "example": true
                }
              },
              "required": ["content", "notificationType", "isRead"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Notification   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Notification updated successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "notification-id"
                    },
                    "userId": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "content": {
                      "type": "string",
                      "example": "Updated notification content"
                    },
                    "notificationType": {
                      "type": "string",
                      "example": "eventReminder"
                    },
                    "isRead": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Notification not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Notification not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/event-participants/": {
      "get": {
        "tags": ["EventParticipant"],
        "summary": "Get all event participants",
        "description": "You can send query parameters for search[], filter[], sort[], page, and limit.\r  <ul>\r  <li>URL/?<b>filter[eventId]=value1</b></li>\r  <li>URL/?<b>filter[userId]=value2</b></li>\r  <li>URL/?<b>sort[createdAt]=-1</b></li>\r  <li>URL/?<b>page=2&limit=10</b></li>\r  </ul>",
        "responses": {
          "200": {
            "description": "List of event participants retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "participant-id"
                      },
                      "userId": {
                        "type": "string",
                        "example": "user-id"
                      },
                      "eventId": {
                        "type": "string",
                        "example": "event-id"
                      },
                      "isPending": {
                        "type": "boolean",
                        "example": true
                      },
                      "isApproved": {
                        "type": "boolean",
                        "example": false
                      },
                      "joinStatus": {
                        "type": "boolean",
                        "example": false
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/event-participants/join": {
      "post": {
        "tags": ["EventParticipant"],
        "summary": "Request to join an event",
        "description": "User sends a request to join an event",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "user-id"
                },
                "eventId": {
                  "type": "string",
                  "example": "event-id"
                }
              },
              "required": ["userId", "eventId"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Join request sent successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Join request sent successfully."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "User has already joined this event."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/event-participants/approve": {
      "post": {
        "tags": ["EventParticipant"],
        "summary": "Approve an event participant",
        "description": "Approve a participant to join an event",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "user-id"
                },
                "eventId": {
                  "type": "string",
                  "example": "event-id"
                }
              },
              "required": ["userId", "eventId"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Participant approved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Participant approved successfully."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "The event has reached its maximum number of participants."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/event-participants/reject": {
      "post": {
        "tags": ["EventParticipant"],
        "summary": "Reject an event participant",
        "description": "Reject a participant from joining an event",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "user-id"
                },
                "eventId": {
                  "type": "string",
                  "example": "event-id"
                }
              },
              "required": ["userId", "eventId"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Participant rejected successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Participant rejected successfully."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "User has not requested to join this event."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/event-participants/confirm-attendance": {
      "post": {
        "tags": ["EventParticipant"],
        "summary": "Confirm attendance of a participant",
        "description": "Confirm that a participant has joined an event",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "user-id"
                },
                "eventId": {
                  "type": "string",
                  "example": "event-id"
                }
              },
              "required": ["userId", "eventId"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attendance confirmed and points updated",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User attendance confirmed and points updated."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "User is not approved to join this event."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/event-participants/confirm-absence": {
      "post": {
        "tags": ["EventParticipant"],
        "summary": "Confirm absence of a participant",
        "description": "Confirm that a participant has not joined an event",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "user-id"
                },
                "eventId": {
                  "type": "string",
                  "example": "event-id"
                }
              },
              "required": ["userId", "eventId"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User absence recorded and email sent.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User absence recorded and email sent."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "User is not approved to join this event."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/event-participants/{id}": {
      "delete": {
        "tags": ["EventParticipant"],
        "summary": "Delete a participant by ID",
        "description": "Delete a specific participant by their ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "EventParticipant ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Participant deleted successfully"
          },
          "404": {
            "description": "Participant not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Participant not found!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/conversations/": {
      "get": {
        "tags": ["Conversation"],
        "summary": "Get all conversations",
        "description": "\r  You can send query parameters for search[], sort[], page, and limit.\r  <ul>\r  <li>URL/?<b>search[field1]=value1</b></li>\r  <li>URL/?<b>sort[field1]=1&sort[createdAt]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": ["Conversation"],
        "summary": "Create a new conversation",
        "description": "Create a new conversation and save it to the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "eventId": {
                  "type": "string",
                  "example": "event-id"
                },
                "": {
                  "type": "string",
                  "example": "user-id"
                },
                "participantIds": {
                  "type": "array",
                  "example": ["user-id1", "user-id2"],
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": ["eventId", "", "participantIds"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Conversation   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "New Conversation successfully  !"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "conversation-id"
                    },
                    "eventId": {
                      "type": "string",
                      "example": "event-id"
                    },
                    "createdBy": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "participantIds": {
                      "type": "array",
                      "example": ["user-id1", "user-id2"],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Only organizations can create a conversation with multiple participants"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/conversations/{id}": {
      "get": {
        "tags": ["Conversation"],
        "summary": "Get a conversation by ID",
        "description": "Retrieve a specific conversation by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": ["Conversation"],
        "summary": "Update an existing conversation",
        "description": "Update the details of an existing conversation by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Conversation ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "participantIds": {
                  "type": "array",
                  "example": [" -user-id1", " -user-id2"],
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": ["participantIds"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "new": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "conversation-id"
                    },
                    "participantIds": {
                      "type": "array",
                      "example": [" -user-id1", "updated-user-id2"],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Conversation not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Conversation not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Conversation"],
        "summary": "Delete a conversation by ID",
        "description": "Delete a specific conversation by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation and related messages   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Conversation and related messages deleted successfully"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Conversation not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Conversation not found!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Conversation"],
        "summary": "Update an existing conversation",
        "description": "Update the details of an existing conversation by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Conversation ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "participantIds": {
                  "type": "array",
                  "example": [" -user-id1", " -user-id2"],
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": ["participantIds"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "new": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "conversation-id"
                    },
                    "participantIds": {
                      "type": "array",
                      "example": [" -user-id1", "updated-user-id2"],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Conversation not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Conversation not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/messages/": {
      "get": {
        "tags": ["Message"],
        "summary": "Get all messages",
        "description": "\r  You can send query parameters for search[], sort[], page, and limit.\r  <ul>\r  <li>URL/?<b>search[field1]=value1</b></li>\r  <li>URL/?<b>sort[field1]=1&sort[createdAt]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "List of messages retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "message-id"
                      },
                      "conversationId": {
                        "type": "string",
                        "example": "conversation-id"
                      },
                      "senderId": {
                        "type": "string",
                        "example": "user-id"
                      },
                      "content": {
                        "type": "string",
                        "example": "message-content"
                      }
                    }
                  }
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "message-id"
                      },
                      "conversationId": {
                        "type": "string",
                        "example": "conversation-id"
                      },
                      "senderId": {
                        "type": "string",
                        "example": "user-id"
                      },
                      "content": {
                        "type": "string",
                        "example": "message-content"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Message"],
        "summary": "Create a new message",
        "description": "Create a new message and save it to the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "conversationId": {
                  "type": "string",
                  "example": "conversation-id"
                },
                "senderId": {
                  "type": "string",
                  "example": "user-id"
                },
                "content": {
                  "type": "string",
                  "example": "message-content"
                }
              },
              "required": ["conversationId", "senderId", "content"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Message   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "New Message successfully created!"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "message-id"
                    },
                    "conversationId": {
                      "type": "string",
                      "example": "conversation-id"
                    },
                    "senderId": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "content": {
                      "type": "string",
                      "example": "message-content"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/messages/{id}": {
      "get": {
        "tags": ["Message"],
        "summary": "Get a message by ID",
        "description": "Retrieve a specific message by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Message ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Message retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "message-id"
                    },
                    "conversationId": {
                      "type": "string",
                      "example": "conversation-id"
                    },
                    "senderId": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "content": {
                      "type": "string",
                      "example": "message-content"
                    },
                    "readerIds": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "user-id"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Message not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Message not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Message"],
        "summary": "Update an existing message",
        "description": "Update the details of an existing message by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Message ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": " -message-content"
                },
                "readerIds": {
                  "type": "array",
                  "example": [" -user-id1", " -user-id2"],
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": ["content", "readerIds"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "new": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "message-id"
                    },
                    "conversationId": {
                      "type": "string",
                      "example": "conversation-id"
                    },
                    "senderId": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "content": {
                      "type": "string",
                      "example": " -message-content"
                    },
                    "readerIds": {
                      "type": "array",
                      "example": [" -user-id1", "updated-user-id2"],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Message not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Message not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Message"],
        "summary": "Delete a message by ID",
        "description": "Delete a specific message by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Message ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Message   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Message deleted successfully"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Message not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Message not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Message"],
        "summary": "Update an existing message",
        "description": "Update the details of an existing message by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Message ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": " -message-content"
                },
                "readerIds": {
                  "type": "array",
                  "example": [" -user-id1", " -user-id2"],
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": ["content", "readerIds"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message   successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "new": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "message-id"
                    },
                    "conversationId": {
                      "type": "string",
                      "example": "conversation-id"
                    },
                    "senderId": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "content": {
                      "type": "string",
                      "example": " -message-content"
                    },
                    "readerIds": {
                      "type": "array",
                      "example": [" -user-id1", "updated-user-id2"],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation errors"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Message not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Message not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/event-reports/": {
      "get": {
        "tags": ["EventReport"],
        "summary": "Get all event reports",
        "description": "\r  Retrieve a list of all event reports. You can send query parameters for search[], sort[], page, and limit.\r  <ul>\r  <li>URL/?<b>search[field1]=value1</b></li>\r  <li>URL/?<b>sort[field1]=1&sort[createdAt]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "List of event reports retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "Object": {
                        "type": "function"
                      }
                    }
                  }
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "report-id"
                      },
                      "eventId": {
                        "type": "string",
                        "example": "event-id"
                      },
                      "reportedBy": {
                        "type": "string",
                        "example": "user-id"
                      },
                      "reportType": {
                        "type": "string",
                        "example": "report-type"
                      },
                      "content": {
                        "type": "string",
                        "example": "report-content"
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "timestamp"
                      },
                      "updatedAt": {
                        "type": "string",
                        "example": "timestamp"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["EventReport"],
        "summary": "Create a new event report",
        "description": "Create a new event report and save it to the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "eventId": {
                  "type": "string",
                  "example": "event-id"
                },
                "reportedBy": {
                  "type": "string",
                  "example": "user-id"
                },
                "reportType": {
                  "type": "string",
                  "example": "report-type"
                },
                "content": {
                  "type": "string",
                  "example": "report-content"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Your report has been received. It will be reviewed carefully.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "report-id"
                    },
                    "eventId": {
                      "type": "string",
                      "example": "event-id"
                    },
                    "reportedBy": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "reportType": {
                      "type": "string",
                      "example": "report-type"
                    },
                    "content": {
                      "type": "string",
                      "example": "report-content"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "timestamp"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "timestamp"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Validation error message"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/event-reports/{id}": {
      "get": {
        "tags": ["EventReport"],
        "summary": "Get an event report by ID",
        "description": "Retrieve a specific event report by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Event Report ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Event report retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "report-id"
                    },
                    "eventId": {
                      "type": "string",
                      "example": "event-id"
                    },
                    "reportedBy": {
                      "type": "string",
                      "example": "user-id"
                    },
                    "reportType": {
                      "type": "string",
                      "example": "report-type"
                    },
                    "content": {
                      "type": "string",
                      "example": "report-content"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "timestamp"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "timestamp"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Event report not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Event report not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["EventReport"],
        "summary": "Delete an event report by ID",
        "description": "Delete a specific event report by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Event Report ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Event report deleted successfully"
          },
          "404": {
            "description": "Event report not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Event report not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/contacts/": {
      "get": {
        "tags": ["Contact"],
        "summary": "Get all contacts",
        "description": "\r  Retrieve a list of all contacts.You can send query parameters for search[], sort[], page, and limit.\r  <ul>\r  <li>URL/?<b>search[field1]=value1</b></li>\r  <li>URL/?<b>sort[field1]=1&sort[createdAt]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "List of contacts retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "Object": {
                        "type": "function"
                      }
                    }
                  }
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "contact-id"
                      },
                      "name": {
                        "type": "string",
                        "example": "contact-name"
                      },
                      "email": {
                        "type": "string",
                        "example": "contact-email"
                      },
                      "subject": {
                        "type": "string",
                        "example": "contact-subject"
                      },
                      "message": {
                        "type": "string",
                        "example": "contact-message"
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "timestamp"
                      },
                      "updatedAt": {
                        "type": "string",
                        "example": "timestamp"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Contact"],
        "summary": "Create a new contact",
        "description": "Handles user contact&message submission by validating input and sending contact form via email.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "contact-name"
                },
                "email": {
                  "type": "string",
                  "example": "contact-email"
                },
                "subject": {
                  "type": "string",
                  "example": "contact-subject"
                },
                "message": {
                  "type": "string",
                  "example": "contact-message"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": ["Contact"],
        "summary": "Get a contact by ID",
        "description": "Retrieve a specific contact by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Contact ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Contact retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "contact-id"
                    },
                    "name": {
                      "type": "string",
                      "example": "contact-name"
                    },
                    "email": {
                      "type": "string",
                      "example": "contact-email"
                    },
                    "subject": {
                      "type": "string",
                      "example": "contact-subject"
                    },
                    "message": {
                      "type": "string",
                      "example": "contact-message"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "timestamp"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "timestamp"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Contact not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Contact"],
        "summary": "Delete a contact by ID",
        "description": "Delete a specific contact by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Contact ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Contact deleted successfully"
          },
          "404": {
            "description": "Contact not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Contact not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "properties": {
        "city": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "country": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "zipCode": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            }
          }
        },
        "state": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            }
          }
        },
        "streetName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            }
          }
        },
        "streetNumber": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            }
          }
        },
        "additional": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            }
          }
        },
        "iframeSrc": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {}
          }
        },
        "latitude": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {}
          }
        },
        "longitude": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {}
          }
        }
      }
    },
    "Contact": {
      "type": "object",
      "properties": {
        "name": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "maxLength": {
              "type": "number",
              "example": 100
            },
            "minLength": {
              "type": "number",
              "example": 3
            }
          }
        },
        "email": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "match": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "1": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "subject": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "maxLength": {
              "type": "number",
              "example": 200
            },
            "minLength": {
              "type": "number",
              "example": 3
            }
          }
        },
        "message": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "maxLength": {
              "type": "number",
              "example": 1000
            },
            "minLength": {
              "type": "number",
              "example": 3
            }
          }
        }
      }
    },
    "Conversation": {
      "type": "object",
      "properties": {
        "eventId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Event"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "immutable": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "createdBy": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "immutable": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "participantIds": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "User"
              }
            }
          }
        },
        "messageIds": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "Message"
              }
            }
          }
        }
      }
    },
    "Document": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "immutable": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "eventId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Event"
            },
            "immutable": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "title": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "maxLength": {
              "type": "number",
              "example": 50
            }
          }
        },
        "fileUrl": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "EventFeedback": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "eventId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Event"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "feedback": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "maxlength": {
              "type": "number",
              "example": 300
            }
          }
        },
        "rating": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "min": {
              "type": "number",
              "example": 1
            },
            "max": {
              "type": "number",
              "example": 5
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "title": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "description": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "addressId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Address"
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "interestIds": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "Interest"
              },
              "required": {
                "type": "boolean",
                "example": true
              },
              "index": {
                "type": "boolean",
                "example": true
              }
            }
          }
        },
        "contactName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "contactEmail": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "object",
              "properties": {
                "validator": {
                  "type": "function"
                },
                "message": {
                  "type": "string",
                  "example": "Invalid email format."
                }
              }
            }
          }
        },
        "contactPhone": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "object",
              "properties": {
                "validator": {
                  "type": "function"
                },
                "message": {
                  "type": "string",
                  "example": "Invalid phone number format or country code."
                }
              }
            }
          }
        },
        "startDate": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "endDate": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "object",
              "properties": {
                "validator": {
                  "type": "function"
                },
                "message": {
                  "type": "string",
                  "example": "End date must be after start date."
                }
              }
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "languages": {
          "type": "object",
          "properties": {
            "type": {
              "type": "array",
              "example": [null],
              "items": {
                "type": "function"
              }
            },
            "enum": {
              "type": "array",
              "example": [
                "aa",
                "ab",
                "ae",
                "af",
                "ak",
                "am",
                "an",
                "ar",
                "as",
                "av",
                "ay",
                "az",
                "ba",
                "be",
                "bg",
                "bh",
                "bi",
                "bm",
                "bn",
                "bo",
                "br",
                "bs",
                "ca",
                "ce",
                "ch",
                "co",
                "cr",
                "cs",
                "cv",
                "cy",
                "da",
                "de",
                "dv",
                "dz",
                "ee",
                "el",
                "en",
                "eo",
                "es",
                "et",
                "eu",
                "fa",
                "ff",
                "fi",
                "fj",
                "fo",
                "fr",
                "ga",
                "gd",
                "gl",
                "gn",
                "gu",
                "gv",
                "ha",
                "he",
                "hi",
                "ho",
                "hr",
                "ht",
                "hu",
                "hy",
                "hz",
                "id",
                "ie",
                "ig",
                "ii",
                "ik",
                "io",
                "is",
                "it",
                "iu",
                "ja",
                "jv",
                "ka",
                "kg",
                "ki",
                "kj",
                "kk",
                "kl",
                "km",
                "kn",
                "ko",
                "kr",
                "ks",
                "ku",
                "kv",
                "kw",
                "ky",
                "la",
                "lb",
                "lg",
                "li",
                "ln",
                "lo",
                "lt",
                "lu",
                "lv",
                "mg",
                "mh",
                "mi",
                "mk",
                "ml",
                "mn",
                "mr",
                "ms",
                "mt",
                "my",
                "na",
                "nd",
                "ne",
                "ng",
                "nl",
                "nn",
                "no",
                "nr",
                "nv",
                "ny",
                "oc",
                "oj",
                "om",
                "or",
                "os",
                "pa",
                "pi",
                "pl",
                "ps",
                "pt",
                "qu",
                "rm",
                "rn",
                "ro",
                "ru",
                "rw",
                "sa",
                "sc",
                "sd",
                "se",
                "sg",
                "si",
                "sk",
                "sl",
                "sm",
                "sn",
                "so",
                "sq",
                "sr",
                "ss",
                "st",
                "su",
                "sv",
                "sw",
                "ta",
                "te",
                "tg",
                "th",
                "ti",
                "tk",
                "tl",
                "tn",
                "to",
                "tr",
                "ts",
                "tt",
                "tw",
                "ty",
                "ug",
                "uk",
                "ur",
                "uz",
                "ve",
                "vi",
                "vo",
                "wa",
                "wo",
                "xh",
                "yi",
                "yo",
                "za",
                "zh",
                "zu"
              ],
              "items": {
                "type": "string"
              }
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "eventPhoto": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "documentIds": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "Document"
              }
            }
          }
        },
        "isOnline": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "isRepeat": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "isActive": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isDone": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "maxParticipant": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "min": {
              "type": "array",
              "example": [1, "At least 1 Participant is required."],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "eventParticipantIds": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "EventParticipant"
              }
            }
          }
        },
        "eventFeedbackIds": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "EventFeedback"
              }
            }
          }
        }
      }
    },
    "EventParticipant": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "immutable": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "eventId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Event"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "immutable": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isPending": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isApproved": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "joinStatus": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "enum": {
              "type": "array",
              "example": ["pending", "joined", "notJoined"],
              "items": {
                "type": "string"
              }
            },
            "default": {
              "type": "string",
              "example": "pending"
            }
          }
        }
      }
    },
    "EventReport": {
      "type": "object",
      "properties": {
        "eventId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Event"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "reportedBy": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            }
          }
        },
        "reportType": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "enum": {
              "type": "array",
              "example": [
                "offensive",
                "harmful",
                "inappropriate",
                "misleading",
                "spam",
                "harassment",
                "fraud",
                "violence",
                "discrimination",
                "other"
              ],
              "items": {
                "type": "string"
              }
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "content": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "minlength": {
              "type": "number",
              "example": 10
            },
            "maxlength": {
              "type": "number",
              "example": 1000
            }
          }
        }
      }
    },
    "Interest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "conversationId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Conversation"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "immutable": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "senderId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "immutable": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "content": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "maxlength": {
              "type": "number",
              "example": 500
            }
          }
        },
        "readerIds": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "User"
              }
            }
          }
        }
      }
    },
    "Notification": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "content": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "minLength": {
              "type": "number",
              "example": 5
            },
            "maxLength": {
              "type": "number",
              "example": 200
            }
          }
        },
        "notificationType": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "enum": {
              "type": "array",
              "example": [
                "eventReminder",
                "eventUpdate",
                "eventJoinRequest",
                "eventApproveParticipant",
                "eventCancellation",
                "confirmEventParticipants",
                "scoreUpdate",
                "badgeUpdate",
                "eventFeedbackRequest"
              ],
              "items": {
                "type": "string"
              }
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isRead": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        }
      }
    },
    "Token": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "token": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "UserDetails": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isFullNameDisplay": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isProfileSetup": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "gender": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "enum": {
              "type": "array",
              "example": ["male", "female", "n/a"],
              "items": {
                "type": "string"
              }
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "ageRange": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "enum": {
              "type": "array",
              "example": ["16-25", "26-35", "35+"],
              "items": {
                "type": "string"
              }
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "bio": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "maxlength": {
              "type": "number",
              "example": 300
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "languages": {
          "type": "object",
          "properties": {
            "type": {
              "type": "array",
              "example": [null],
              "items": {
                "type": "function"
              }
            },
            "enum": {
              "type": "array",
              "example": [
                "aa",
                "ab",
                "ae",
                "af",
                "ak",
                "am",
                "an",
                "ar",
                "as",
                "av",
                "ay",
                "az",
                "ba",
                "be",
                "bg",
                "bh",
                "bi",
                "bm",
                "bn",
                "bo",
                "br",
                "bs",
                "ca",
                "ce",
                "ch",
                "co",
                "cr",
                "cs",
                "cv",
                "cy",
                "da",
                "de",
                "dv",
                "dz",
                "ee",
                "el",
                "en",
                "eo",
                "es",
                "et",
                "eu",
                "fa",
                "ff",
                "fi",
                "fj",
                "fo",
                "fr",
                "ga",
                "gd",
                "gl",
                "gn",
                "gu",
                "gv",
                "ha",
                "he",
                "hi",
                "ho",
                "hr",
                "ht",
                "hu",
                "hy",
                "hz",
                "id",
                "ie",
                "ig",
                "ii",
                "ik",
                "io",
                "is",
                "it",
                "iu",
                "ja",
                "jv",
                "ka",
                "kg",
                "ki",
                "kj",
                "kk",
                "kl",
                "km",
                "kn",
                "ko",
                "kr",
                "ks",
                "ku",
                "kv",
                "kw",
                "ky",
                "la",
                "lb",
                "lg",
                "li",
                "ln",
                "lo",
                "lt",
                "lu",
                "lv",
                "mg",
                "mh",
                "mi",
                "mk",
                "ml",
                "mn",
                "mr",
                "ms",
                "mt",
                "my",
                "na",
                "nd",
                "ne",
                "ng",
                "nl",
                "nn",
                "no",
                "nr",
                "nv",
                "ny",
                "oc",
                "oj",
                "om",
                "or",
                "os",
                "pa",
                "pi",
                "pl",
                "ps",
                "pt",
                "qu",
                "rm",
                "rn",
                "ro",
                "ru",
                "rw",
                "sa",
                "sc",
                "sd",
                "se",
                "sg",
                "si",
                "sk",
                "sl",
                "sm",
                "sn",
                "so",
                "sq",
                "sr",
                "ss",
                "st",
                "su",
                "sv",
                "sw",
                "ta",
                "te",
                "tg",
                "th",
                "ti",
                "tk",
                "tl",
                "tn",
                "to",
                "tr",
                "ts",
                "tt",
                "tw",
                "ty",
                "ug",
                "uk",
                "ur",
                "uz",
                "ve",
                "vi",
                "vo",
                "wa",
                "wo",
                "xh",
                "yi",
                "yo",
                "za",
                "zh",
                "zu"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "avatar": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "totalPoint": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "number",
              "example": 0
            },
            "min": {
              "type": "array",
              "example": [0, "Total point cannot be negative"],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "interestIds": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "Interest"
              }
            }
          }
        },
        "organizationLogo": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "organizationDesc": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "maxlength": {
              "type": "number",
              "example": 1000
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "organizationUrl": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "addressId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Address"
            }
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "userType": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "enum": {
              "type": "object",
              "properties": {
                "values": {
                  "type": "array",
                  "example": ["admin", "individual", "organization"],
                  "items": {
                    "type": "string"
                  }
                },
                "message": {
                  "type": "string",
                  "example": "Invalid userType. Valid values are: admin, individual, organization."
                }
              }
            },
            "required": {
              "type": "array",
              "example": [true, "UserType is required."],
              "items": {
                "type": "string"
              }
            },
            "immutable": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "googleId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            }
          }
        },
        "userDetailsId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "UserDetails"
            }
          }
        },
        "fullName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "organizationName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "email": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "password": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            }
          }
        },
        "isActive": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isEmailVerified": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "documentIds": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "Document"
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "Token": []
    },
    {
      "Bearer": []
    }
  ]
}
